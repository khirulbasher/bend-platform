import { __decorate } from "tslib";
import { FlexibleDataTypes, FlexibleRuleNameTexts, FlexibleRulePolicyTexts } from '../model/crud/base-flexible-crud.data';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class AbstractBendFlexibleCompilerService {
    constructor() {
        this.AND_SEPARATOR = ' - ';
        this.GLOBAL_DEFAULT_VALUE = 'N/A';
    }
    compile(index, values) {
        if (!index.dynamic) {
            return values[index.index];
        }
        else {
            if (index.flexibleRule.name === FlexibleRuleNameTexts.AND) {
                return this.returnFromAnd(index, values);
            }
            else if (index.flexibleRule.name === FlexibleRuleNameTexts.OR) {
                return this.returnFromOr(index, values);
            }
            else if (index.flexibleRule.name === FlexibleRuleNameTexts.BOOL) {
                return this.returnFromBool(index, values);
            }
        }
        return this.GLOBAL_DEFAULT_VALUE;
    }
    valueByDataType(objValue, dataType) {
        if (objValue == null) {
            return this.GLOBAL_DEFAULT_VALUE;
        }
        switch (dataType) {
            case FlexibleDataTypes.STRING:
                return objValue.toString();
        }
    }
    returnFromAnd(index, values) {
        let output = '';
        for (const indexValue of index.flexibleRule.fromIndices) {
            output += this.AND_SEPARATOR + this.valueByDataType(values[indexValue], index.flexibleRule.indicesDataTypes[indexValue]);
        }
        return output;
    }
    returnFromOr(index, values) {
        switch (index.flexibleRule.rulePolicy.toString()) {
            case FlexibleRulePolicyTexts.CHECKED_BY_NULL:
                return this.basedOnNull(index, values);
        }
        return this.GLOBAL_DEFAULT_VALUE;
    }
    returnFromBool(index, values) {
        const indexTop = index.flexibleRule.fromIndices[0];
        if (String(values[indexTop]).toUpperCase() === 'TRUE') {
            return this.valueByDataType(index.flexibleRule.referenceValues[0], this.getByIndex(index.flexibleRule.indicesDataTypes, 0));
        }
        else {
            return this.valueByDataType(index.flexibleRule.referenceValues[1], this.getByIndex(index.flexibleRule.indicesDataTypes, 1));
        }
    }
    getByIndex(indicesDataTypes, index) {
        if (indicesDataTypes == null || indicesDataTypes.length <= index) {
            return FlexibleDataTypes.STRING;
        }
        return indicesDataTypes[index];
    }
    basedOnNull(index, values) {
        for (const indexValue of index.flexibleRule.fromIndices) {
            if (values[indexValue] != null) {
                return this.valueByDataType(values[indexValue], this.getByIndex(index.flexibleRule.indicesDataTypes, indexValue));
            }
        }
        return this.GLOBAL_DEFAULT_VALUE;
    }
}
let BendFlexibleCompilerService = class BendFlexibleCompilerService extends AbstractBendFlexibleCompilerService {
};
BendFlexibleCompilerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function BendFlexibleCompilerService_Factory() { return new BendFlexibleCompilerService(); }, token: BendFlexibleCompilerService, providedIn: "root" });
BendFlexibleCompilerService = __decorate([
    Injectable({ providedIn: 'root' })
], BendFlexibleCompilerService);
export { BendFlexibleCompilerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVuZC1mbGV4aWJsZS1jb21waWxlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYmVuZC1jb3JlLyIsInNvdXJjZXMiOlsibGliL2NvbXBpbGUvYmVuZC1mbGV4aWJsZS1jb21waWxlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsaUJBQWlCLEVBRWpCLHFCQUFxQixFQUFFLHVCQUF1QixFQUMvQyxNQUFNLHVDQUF1QyxDQUFDO0FBQy9DLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7O0FBRXpDLE1BQU0sT0FBZ0IsbUNBQW1DO0lBQXpEO1FBQ0Usa0JBQWEsR0FBRyxLQUFLLENBQUM7UUFDZCx5QkFBb0IsR0FBRyxLQUFLLENBQUM7SUFtRXZDLENBQUM7SUFqRUMsT0FBTyxDQUFDLEtBQW9CLEVBQUUsTUFBYTtRQUN6QyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUNsQixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDNUI7YUFBTTtZQUNMLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLEtBQUsscUJBQXFCLENBQUMsR0FBRyxFQUFFO2dCQUN6RCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2FBQzFDO2lCQUFNLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLEtBQUsscUJBQXFCLENBQUMsRUFBRSxFQUFFO2dCQUMvRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2FBQ3pDO2lCQUFNLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLEtBQUsscUJBQXFCLENBQUMsSUFBSSxFQUFFO2dCQUNqRSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2FBQzNDO1NBQ0Y7UUFDRCxPQUFPLElBQUks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RlksMkJBQTJCO0lBRHZDLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQztHQUN0QiwyQkFBMkIsQ0FFdkM7U0FGWSwyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIEZsZXhpYmxlRGF0YVR5cGVzLFxyXG4gIEZsZXhpYmxlSW5kZXgsXHJcbiAgRmxleGlibGVSdWxlTmFtZVRleHRzLCBGbGV4aWJsZVJ1bGVQb2xpY3lUZXh0c1xyXG59IGZyb20gJy4uL21vZGVsL2NydWQvYmFzZS1mbGV4aWJsZS1jcnVkLmRhdGEnO1xyXG5pbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0QmVuZEZsZXhpYmxlQ29tcGlsZXJTZXJ2aWNlIHtcclxuICBBTkRfU0VQQVJBVE9SID0gJyAtICc7XHJcbiAgcHJpdmF0ZSBHTE9CQUxfREVGQVVMVF9WQUxVRSA9ICdOL0EnO1xyXG5cclxuICBjb21waWxlKGluZGV4OiBGbGV4aWJsZUluZGV4LCB2YWx1ZXM6IGFueVtdKTogYW55IHtcclxuICAgIGlmICghaW5kZXguZHluYW1pYykge1xyXG4gICAgICByZXR1cm4gdmFsdWVzW2luZGV4LmluZGV4XTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChpbmRleC5mbGV4aWJsZVJ1bGUubmFtZSA9PT0gRmxleGlibGVSdWxlTmFtZVRleHRzLkFORCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJldHVybkZyb21BbmQoaW5kZXgsIHZhbHVlcyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoaW5kZXguZmxleGlibGVSdWxlLm5hbWUgPT09IEZsZXhpYmxlUnVsZU5hbWVUZXh0cy5PUikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJldHVybkZyb21PcihpbmRleCwgdmFsdWVzKTtcclxuICAgICAgfSBlbHNlIGlmIChpbmRleC5mbGV4aWJsZVJ1bGUubmFtZSA9PT0gRmxleGlibGVSdWxlTmFtZVRleHRzLkJPT0wpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXR1cm5Gcm9tQm9vbChpbmRleCwgdmFsdWVzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuR0xPQkFMX0RFRkFVTFRfVkFMVUU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHZhbHVlQnlEYXRhVHlwZShvYmpWYWx1ZTogYW55LCBkYXRhVHlwZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGlmIChvYmpWYWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLkdMT0JBTF9ERUZBVUxUX1ZBTFVFO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoIChkYXRhVHlwZSkge1xyXG4gICAgICBjYXNlIEZsZXhpYmxlRGF0YVR5cGVzLlNUUklORzpcclxuICAgICAgICByZXR1cm4gb2JqVmFsdWUudG9TdHJpbmcoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCByZXR1cm5Gcm9tQW5kKGluZGV4OiBGbGV4aWJsZUluZGV4LCB2YWx1ZXM6IGFueVtdKTogYW55IHtcclxuICAgIGxldCBvdXRwdXQgPSAnJztcclxuICAgIGZvciAoY29uc3QgaW5kZXhWYWx1ZSBvZiBpbmRleC5mbGV4aWJsZVJ1bGUuZnJvbUluZGljZXMpIHtcclxuICAgICAgb3V0cHV0ICs9IHRoaXMuQU5EX1NFUEFSQVRPUiArIHRoaXMudmFsdWVCeURhdGFUeXBlKHZhbHVlc1tpbmRleFZhbHVlXSwgaW5kZXguZmxleGlibGVSdWxlLmluZGljZXNEYXRhVHlwZXNbaW5kZXhWYWx1ZV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dHB1dDtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCByZXR1cm5Gcm9tT3IoaW5kZXg6IEZsZXhpYmxlSW5kZXgsIHZhbHVlczogYW55W10pIHtcclxuICAgIHN3aXRjaCAoaW5kZXguZmxleGlibGVSdWxlLnJ1bGVQb2xpY3kudG9TdHJpbmcoKSkge1xyXG4gICAgICBjYXNlIEZsZXhpYmxlUnVsZVBvbGljeVRleHRzLkNIRUNLRURfQllfTlVMTDpcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlZE9uTnVsbChpbmRleCwgdmFsdWVzKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLkdMT0JBTF9ERUZBVUxUX1ZBTFVFO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHJldHVybkZyb21Cb29sKGluZGV4OiBGbGV4aWJsZUluZGV4LCB2YWx1ZXM6IGFueVtdKTogYW55IHtcclxuICAgIGNvbnN0IGluZGV4VG9wID0gaW5kZXguZmxleGlibGVSdWxlLmZyb21JbmRpY2VzWzBdO1xyXG4gICAgaWYgKFN0cmluZyh2YWx1ZXNbaW5kZXhUb3BdKS50b1VwcGVyQ2FzZSgpID09PSAnVFJVRScpIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmFsdWVCeURhdGFUeXBlKGluZGV4LmZsZXhpYmxlUnVsZS5yZWZlcmVuY2VWYWx1ZXNbMF0sIHRoaXMuZ2V0QnlJbmRleChpbmRleC5mbGV4aWJsZVJ1bGUuaW5kaWNlc0RhdGFUeXBlcywgMCkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmFsdWVCeURhdGFUeXBlKGluZGV4LmZsZXhpYmxlUnVsZS5yZWZlcmVuY2VWYWx1ZXNbMV0sIHRoaXMuZ2V0QnlJbmRleChpbmRleC5mbGV4aWJsZVJ1bGUuaW5kaWNlc0RhdGFUeXBlcywgMSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRCeUluZGV4KGluZGljZXNEYXRhVHlwZXM6IHN0cmluZ1tdLCBpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIGlmIChpbmRpY2VzRGF0YVR5cGVzID09IG51bGwgfHwgaW5kaWNlc0RhdGFUeXBlcy5sZW5ndGggPD0gaW5kZXgpIHtcclxuICAgICAgcmV0dXJuIEZsZXhpYmxlRGF0YVR5cGVzLlNUUklORztcclxuICAgIH1cclxuICAgIHJldHVybiBpbmRpY2VzRGF0YVR5cGVzW2luZGV4XTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYmFzZWRPbk51bGwoaW5kZXg6IEZsZXhpYmxlSW5kZXgsIHZhbHVlczogYW55W10pOiBhbnkge1xyXG4gICAgZm9yIChjb25zdCBpbmRleFZhbHVlIG9mIGluZGV4LmZsZXhpYmxlUnVsZS5mcm9tSW5kaWNlcykge1xyXG4gICAgICBpZiAodmFsdWVzW2luZGV4VmFsdWVdICE9IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZUJ5RGF0YVR5cGUodmFsdWVzW2luZGV4VmFsdWVdLCB0aGlzLmdldEJ5SW5kZXgoaW5kZXguZmxleGlibGVSdWxlLmluZGljZXNEYXRhVHlwZXMsIGluZGV4VmFsdWUpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuR0xPQkFMX0RFRkFVTFRfVkFMVUU7XHJcbiAgfVxyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgQmVuZEZsZXhpYmxlQ29tcGlsZXJTZXJ2aWNlIGV4dGVuZHMgQWJzdHJhY3RCZW5kRmxleGlibGVDb21waWxlclNlcnZpY2Uge1xyXG5cclxufVxyXG4iXX0=