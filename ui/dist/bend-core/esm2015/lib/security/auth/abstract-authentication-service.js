import { Subject } from 'rxjs';
import { httpStatus } from '../http/http-status';
import { BendCoreConstants } from '../../environments/bend-core-constants';
export class ConsoleAuthenticationCallback {
    constructor(consoleService) {
        this.consoleService = consoleService;
    }
    authenticationState(isAuthenticated, message, error) {
        if (error == null) {
            this.consoleService.message(message);
        }
        else {
            this.consoleService.error(message, error);
        }
    }
}
export class AbstractAuthenticationService {
    constructor(accountService, consoleService, storageService) {
        this.accountService = accountService;
        this.consoleService = consoleService;
        this.storageService = storageService;
        this.authenticationState = new Subject();
        this.SUCCESS_MESSAGE = 'Authenticated Successfully';
        this.FAILURE_MESSAGE = 'Error Occurred During Authentication';
    }
    authenticate(info, callback) {
        if (callback == null) {
            callback = new ConsoleAuthenticationCallback(this.consoleService);
        }
        this.accountService.login(info)
            .subscribe((res) => {
            if (res.status === httpStatus.OK) {
                this.accountInfo = res.body;
                if (this.accountInfo != null && this.accountInfo.authenticated) {
                    this.saveToCookie(this.accountInfo);
                    this.authenticationState.next(this.accountInfo);
                    callback.authenticationState(true, this.SUCCESS_MESSAGE);
                }
                else {
                    this.authenticationState.next(null);
                    callback.authenticationState(false, this.FAILURE_MESSAGE);
                }
            }
            else {
                this.authenticationState.next(null);
                callback.authenticationState(false, this.FAILURE_MESSAGE);
            }
        }, (res) => {
            this.deleteCookie();
            this.authenticationState.next(null);
            callback.authenticationState(false, this.FAILURE_MESSAGE);
        });
    }
    saveToCookie(accountInfo) {
        this.saveCookieByKey(BendCoreConstants.cookies.AUTHENTICATION_STATE, JSON.stringify(accountInfo.authenticated));
        this.saveCookieByKey(BendCoreConstants.cookies.TOKEN, accountInfo.token);
        this.saveCookieByKey(BendCoreConstants.cookies.AUTHORITIES, JSON.stringify(accountInfo.authorities));
        accountInfo.token = null;
        accountInfo.authorities = [];
        this.saveCookieByKey(BendCoreConstants.cookies.ACCOUNT_INFO, JSON.stringify(accountInfo));
    }
    refreshToken(token) {
        this.deleteCookieByKey(BendCoreConstants.cookies.TOKEN);
        this.saveCookieByKey(BendCoreConstants.cookies.TOKEN, token);
    }
    retrieveAccountInfo() {
        const cookie = this.retrieveCookieByKey(BendCoreConstants.cookies.ACCOUNT_INFO);
        if (cookie == null || cookie.length < 1) {
            this.accountService.accountInfo().subscribe((resp) => {
                if (resp.status === httpStatus.OK) {
                    const accInfo = resp.body;
                    this.saveToCookie(accInfo);
                    const sub = new Subject();
                    sub.next(accInfo);
                    return sub.asObservable();
                }
                else {
                    this.consoleService.error('No Account Info Found');
                }
            }, (err) => {
                this.consoleService.error('Error Occurred During Account Fetch', err);
            });
        }
        this.accountInfo = JSON.parse(cookie);
        const subject = new Subject();
        subject.next(this.accountInfo);
        return subject.asObservable();
    }
    isAuthenticated() {
        const cookie = this.retrieveCookieByKey(BendCoreConstants.cookies.AUTHENTICATION_STATE);
        if (cookie == null || cookie.length < 1) {
            return false;
        }
        return JSON.parse(cookie);
    }
    currentToken() {
        return this.retrieveCookieByKey(BendCoreConstants.cookies.TOKEN);
    }
    authorities() {
        const authorities = this.retrieveCookieByKey(BendCoreConstants.cookies.AUTHORITIES);
        if (authorities == null || authorities.length < 1) {
            return [];
        }
        return JSON.parse(authorities);
    }
    getAuthenticationState() {
        return this.authenticationState.asObservable();
    }
    deleteCookie() {
        this.deleteCookieByKey(BendCoreConstants.cookies.TOKEN);
        this.deleteCookieByKey(BendCoreConstants.cookies.AUTHORITIES);
        this.deleteCookieByKey(BendCoreConstants.cookies.ACCOUNT_INFO);
        this.deleteCookieByKey(BendCoreConstants.cookies.AUTHENTICATION_STATE);
    }
    logout(info) {
        this.deleteCookie();
        this.authenticationState.next(null);
        this.consoleService.message('Logout Success of User' + info.logoutRule);
    }
    hasAnyAuthority(authorities) {
        const grantedAuthorities = this.authorities();
        for (const auth of authorities) {
            if (grantedAuthorities.includes(auth)) {
                return true;
            }
        }
        return false;
    }
    deleteCookieByKey(key) {
        this.storageService.remove(key);
    }
    saveCookieByKey(key, value) {
        this.storageService.put(key, value);
    }
    retrieveCookieByKey(key) {
        return this.storageService.get(key);
    }
}
//# sourceMappingURL=data:application/json;base64,