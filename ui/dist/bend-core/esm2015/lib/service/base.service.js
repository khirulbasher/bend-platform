import { createRequestOption } from './util/create-request-option.util';
import { BendCoreConstants } from '../environments/bend-core-constants';
export class AbstractBaseService {
    constructor(BASE_URL, http, BASE_API_URL) {
        this.BASE_URL = BASE_URL;
        this.http = http;
        this.BASE_API_URL = BASE_API_URL;
        if (this.BASE_API_URL == null || this.BASE_API_URL.length < 1) {
            this.BASE_API_URL = BendCoreConstants.API_URL;
        }
        this.PRIVATE_URL = this.BASE_API_URL + '/private' + this.BASE_URL;
        this.PRIVATE_ADMIN_URL = this.BASE_API_URL + '/private/admin' + this.BASE_URL;
        this.PUBLIC_URL = this.BASE_API_URL + '/public' + this.BASE_URL;
        this.ACTUAL_URL = this.BASE_API_URL + this.BASE_URL;
        this.DEFAULT_URL = this.PRIVATE_URL;
    }
}
export class BaseService extends AbstractBaseService {
    constructor(BASE_URL, http, BASE_API_URL = BendCoreConstants.API_URL) { super(BASE_URL, http, BASE_API_URL); }
    save(baseData) {
        return this.http.post(this.DEFAULT_URL, baseData, { observe: 'response' });
    }
    update(baseData) {
        return this.http.put(this.DEFAULT_URL, baseData, { observe: 'response' });
    }
    fetchAll(page) {
        const options = createRequestOption(page);
        return this.http.get(this.DEFAULT_URL, { params: options, observe: 'response' });
    }
    fetchAllFlexible(page) {
        const options = createRequestOption(page);
        return this.http.get(`${this.DEFAULT_URL}/flexible`, { params: options, observe: 'response' });
    }
    delete(id) {
        return this.http.delete(`${this.DEFAULT_URL}/${id}`, { observe: 'response' });
    }
    findOne(id) {
        return this.http.get(`${this.DEFAULT_URL}/${id}`, { observe: 'response' });
    }
}
export class BaseFetchService extends AbstractBaseService {
    constructor(BASE_URL, http, BASE_API_URL) { super(BASE_URL, http, BASE_API_URL); }
    fetch(inputs) {
        return this.http.post(this.DEFAULT_URL, inputs, { observe: 'response' });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYmVuZC1jb3JlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvYmFzZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBRXRFLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHFDQUFxQyxDQUFDO0FBRXRFLE1BQU0sT0FBZ0IsbUJBQW1CO0lBT3ZDLFlBQ21CLFFBQWdCLEVBQ3ZCLElBQWdCLEVBQ1QsWUFBcUI7UUFGckIsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUN2QixTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ1QsaUJBQVksR0FBWixZQUFZLENBQVM7UUFFdEMsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDN0QsSUFBSSxDQUFDLFlBQVksR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7U0FDL0M7UUFDRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLEdBQUcsVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDbEUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM5RSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDaEUsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDcEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQ3RDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxXQUE2RCxTQUFRLG1CQUFtQjtJQUNuRyxZQUNFLFFBQWdCLEVBQ2hCLElBQWdCLEVBQ2hCLGVBQXVCLGlCQUFpQixDQUFDLE9BQU8sSUFDL0MsS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWxDLElBQUksQ0FBQyxRQUFnQjtRQUMxQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFlLElBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLEVBQUMsT0FBTyxFQUFFLFVBQVUsRUFBQyxDQUFDLENBQUM7SUFDekYsQ0FBQztJQUVNLE1BQU0sQ0FBQyxRQUFnQjtRQUM1QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFlLElBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLEVBQUMsT0FBTyxFQUFFLFVBQVUsRUFBQyxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVNLFFBQVEsQ0FBQyxJQUFXO1FBQ3pCLE1BQU0sT0FBTyxHQUFHLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQTJDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUMsQ0FBQyxDQUFDO0lBQzNILENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxJQUFXO1FBQ2pDLE1BQU0sT0FBTyxHQUFHLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQXlDLEdBQUcsSUFBSSxDQUFDLFdBQVcsV0FBVyxFQUFFLEVBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQztJQUN2SSxDQUFDO0lBRU0sTUFBTSxDQUFDLEVBQVU7UUFDdEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBZSxHQUFHLElBQUksQ0FBQyxXQUFXLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBQyxPQUFPLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBRU0sT0FBTyxDQUFDLEVBQW1CO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQW1CLEdBQUcsSUFBSSxDQUFDLFdBQVcsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUMsQ0FBQyxDQUFDO0lBQzdGLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxnQkFBdUIsU0FBUSxtQkFBbUI7SUFDN0QsWUFDRSxRQUFnQixFQUNoQixJQUFnQixFQUNoQixZQUFxQixJQUNuQixLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUMsS0FBSyxDQUFDLE1BQVc7UUFDZixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFpQixJQUFJLENBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUMsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SHR0cENsaWVudCwgSHR0cFJlc3BvbnNlfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7QmFzZUNydWREYXRhLCBCYXNlQ3J1ZFZpZXdEYXRhfSBmcm9tICcuLi9tb2RlbC9jcnVkL2Jhc2UtY3J1ZC5kYXRhJztcclxuaW1wb3J0IHtCYXNlRGF0YX0gZnJvbSAnLi4vbW9kZWwvYmFzZS1kYXRhJztcclxuaW1wb3J0IHtCZW5kUmVzcG9uc2V9IGZyb20gJy4uL21vZGVsL2NydWQvcmVzcG9uc2UvYmVuZC1yZXNwb25zZS5tb2RlbCc7XHJcbmltcG9ydCB7RGF0YVJlc3BvbnNlLCBQYWdlYWJsZURhdGFSZXNwb25zZX0gZnJvbSAnLi4vbW9kZWwvY3J1ZC9yZXNwb25zZS9kYXRhLXJlc3BvbnNlLm1vZGVsJztcclxuaW1wb3J0IHtQYWdlfSBmcm9tICcuLi9tb2RlbC9jcnVkL3BhZ2UtcmVxdWVzdC5kYXRhJztcclxuaW1wb3J0IHtjcmVhdGVSZXF1ZXN0T3B0aW9ufSBmcm9tICcuL3V0aWwvY3JlYXRlLXJlcXVlc3Qtb3B0aW9uLnV0aWwnO1xyXG5pbXBvcnQge0Jhc2VGbGV4aWJsZUNydWRWaWV3RGF0YX0gZnJvbSAnLi4vbW9kZWwvY3J1ZC9iYXNlLWZsZXhpYmxlLWNydWQuZGF0YSc7XHJcbmltcG9ydCB7QmVuZENvcmVDb25zdGFudHN9IGZyb20gJy4uL2Vudmlyb25tZW50cy9iZW5kLWNvcmUtY29uc3RhbnRzJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdEJhc2VTZXJ2aWNlIHtcclxuICBwcm90ZWN0ZWQgUFJJVkFURV9VUkw6IHN0cmluZztcclxuICBwcm90ZWN0ZWQgUFJJVkFURV9BRE1JTl9VUkw6IHN0cmluZztcclxuICBwcm90ZWN0ZWQgUFVCTElDX1VSTDogc3RyaW5nO1xyXG4gIHByb3RlY3RlZCBBQ1RVQUxfVVJMOiBzdHJpbmc7XHJcbiAgcHJvdGVjdGVkIERFRkFVTFRfVVJMOiBzdHJpbmc7XHJcblxyXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgQkFTRV9VUkw6IHN0cmluZyxcclxuICAgIHByb3RlY3RlZCBodHRwOiBIdHRwQ2xpZW50LFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBCQVNFX0FQSV9VUkw/OiBzdHJpbmdcclxuICApIHtcclxuICAgIGlmICh0aGlzLkJBU0VfQVBJX1VSTCA9PSBudWxsIHx8IHRoaXMuQkFTRV9BUElfVVJMLmxlbmd0aCA8IDEpIHtcclxuICAgICAgdGhpcy5CQVNFX0FQSV9VUkwgPSBCZW5kQ29yZUNvbnN0YW50cy5BUElfVVJMO1xyXG4gICAgfVxyXG4gICAgdGhpcy5QUklWQVRFX1VSTCA9IHRoaXMuQkFTRV9BUElfVVJMICsgJy9wcml2YXRlJyArIHRoaXMuQkFTRV9VUkw7XHJcbiAgICB0aGlzLlBSSVZBVEVfQURNSU5fVVJMID0gdGhpcy5CQVNFX0FQSV9VUkwgKyAnL3ByaXZhdGUvYWRtaW4nICsgdGhpcy5CQVNFX1VSTDtcclxuICAgIHRoaXMuUFVCTElDX1VSTCA9IHRoaXMuQkFTRV9BUElfVVJMICsgJy9wdWJsaWMnICsgdGhpcy5CQVNFX1VSTDtcclxuICAgIHRoaXMuQUNUVUFMX1VSTCA9IHRoaXMuQkFTRV9BUElfVVJMICsgdGhpcy5CQVNFX1VSTDtcclxuICAgIHRoaXMuREVGQVVMVF9VUkwgPSB0aGlzLlBSSVZBVEVfVVJMO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJhc2VTZXJ2aWNlPFIgZXh0ZW5kcyBCYXNlQ3J1ZERhdGEsIERvbWFpbiBleHRlbmRzIEJhc2VEYXRhPiBleHRlbmRzIEFic3RyYWN0QmFzZVNlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgQkFTRV9VUkw6IHN0cmluZyxcclxuICAgIGh0dHA6IEh0dHBDbGllbnQsXHJcbiAgICBCQVNFX0FQSV9VUkw6IHN0cmluZyA9IEJlbmRDb3JlQ29uc3RhbnRzLkFQSV9VUkxcclxuICApIHtzdXBlcihCQVNFX1VSTCwgaHR0cCwgQkFTRV9BUElfVVJMKTsgfVxyXG5cclxuICBwdWJsaWMgc2F2ZShiYXNlRGF0YTogRG9tYWluKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8QmVuZFJlc3BvbnNlPj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0PEJlbmRSZXNwb25zZT4odGhpcy5ERUZBVUxUX1VSTCwgYmFzZURhdGEsIHtvYnNlcnZlOiAncmVzcG9uc2UnfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdXBkYXRlKGJhc2VEYXRhOiBEb21haW4pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxCZW5kUmVzcG9uc2U+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnB1dDxCZW5kUmVzcG9uc2U+KHRoaXMuREVGQVVMVF9VUkwsIGJhc2VEYXRhLCB7b2JzZXJ2ZTogJ3Jlc3BvbnNlJ30pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGZldGNoQWxsKHBhZ2U/OiBQYWdlKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8UGFnZWFibGVEYXRhUmVzcG9uc2U8QmFzZUNydWRWaWV3RGF0YVtdPj4+IHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBjcmVhdGVSZXF1ZXN0T3B0aW9uKHBhZ2UpO1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8UGFnZWFibGVEYXRhUmVzcG9uc2U8QmFzZUNydWRWaWV3RGF0YVtdPj4odGhpcy5ERUZBVUxUX1VSTCwge3BhcmFtczogb3B0aW9ucywgb2JzZXJ2ZTogJ3Jlc3BvbnNlJ30pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGZldGNoQWxsRmxleGlibGUocGFnZT86IFBhZ2UpOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxEYXRhUmVzcG9uc2U8QmFzZUZsZXhpYmxlQ3J1ZFZpZXdEYXRhPj4+IHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBjcmVhdGVSZXF1ZXN0T3B0aW9uKHBhZ2UpO1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8RGF0YVJlc3BvbnNlPEJhc2VGbGV4aWJsZUNydWRWaWV3RGF0YT4+KGAke3RoaXMuREVGQVVMVF9VUkx9L2ZsZXhpYmxlYCwge3BhcmFtczogb3B0aW9ucywgb2JzZXJ2ZTogJ3Jlc3BvbnNlJ30pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRlbGV0ZShpZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8QmVuZFJlc3BvbnNlPj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGU8QmVuZFJlc3BvbnNlPihgJHt0aGlzLkRFRkFVTFRfVVJMfS8ke2lkfWAsIHtvYnNlcnZlOiAncmVzcG9uc2UnfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZmluZE9uZShpZDogbnVtYmVyIHwgc3RyaW5nKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8RGF0YVJlc3BvbnNlPFI+Pj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8RGF0YVJlc3BvbnNlPFI+PiggYCR7dGhpcy5ERUZBVUxUX1VSTH0vJHtpZH1gLCB7b2JzZXJ2ZTogJ3Jlc3BvbnNlJ30pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJhc2VGZXRjaFNlcnZpY2U8SSwgTz4gZXh0ZW5kcyBBYnN0cmFjdEJhc2VTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEJBU0VfVVJMOiBzdHJpbmcsXHJcbiAgICBodHRwOiBIdHRwQ2xpZW50LFxyXG4gICAgQkFTRV9BUElfVVJMPzogc3RyaW5nXHJcbiAgKSB7IHN1cGVyKEJBU0VfVVJMLCBodHRwLCBCQVNFX0FQSV9VUkwpOyB9XHJcblxyXG4gIGZldGNoKGlucHV0czogSVtdKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8TWFwPHN0cmluZywgTz4+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Q8TWFwPHN0cmluZywgTz4+KHRoaXMuREVGQVVMVF9VUkwsIGlucHV0cywge29ic2VydmU6ICdyZXNwb25zZSd9KTtcclxuICB9XHJcbn1cclxuIl19