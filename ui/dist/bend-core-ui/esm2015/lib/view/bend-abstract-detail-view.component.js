import { BendStatusText } from 'bend-core';
import { BendBaseComponent } from './bend-base.component';
export class BendAbstractDetailViewComponent extends BendBaseComponent {
    constructor(activatedRoute, userCrudService, toastService, consoleService, textProcessingService, uiModel, translate, langKeyService) {
        super();
        this.activatedRoute = activatedRoute;
        this.userCrudService = userCrudService;
        this.toastService = toastService;
        this.consoleService = consoleService;
        this.textProcessingService = textProcessingService;
        this.uiModel = uiModel;
        this.translate = translate;
        this.langKeyService = langKeyService;
    }
    ngOnInit() {
        super.prepareTranslate(this.translate, this.langKeyService);
        this.ready = false;
        this.viewId = this.activatedRoute.snapshot.params.id;
        if (this.viewId == null)
            this.toastService.error('Cannot fetch view Data, id param empty');
        else
            this.fetchData();
    }
    fetchData() {
        this.userCrudService.findOne(this.viewId).subscribe((res) => {
            this.response(res);
        }, (error) => {
            this.error(error);
        });
    }
    response(res) {
        if (res.ok && res.body.status.toString() === BendStatusText.SUCCESS) {
            this.consoleService.message('Successfully Fetch Detail View Data');
            this.crudData = res.body.data;
            this.ready = true;
        }
        else
            this.toastService.error('Error during Detail View data fetch');
    }
    error(error) {
        this.consoleService.error('Error During Detail View Data Fetch', error);
    }
    getAllAvailableFields(baseCrudData) {
        const availableFields = Object.getOwnPropertyNames(baseCrudData); /*Delete Current Time*/
        let idx = availableFields.indexOf('currentTime');
        availableFields.splice(idx, idx + 1);
        idx = availableFields.indexOf('id');
        availableFields.splice(idx, idx + 1);
        idx = availableFields.indexOf('password');
        availableFields.splice(idx, idx + 1);
        return availableFields;
    }
    getFieldValue(baseCrudData, fieldName) {
        const descriptor = Object.getOwnPropertyDescriptor(baseCrudData, fieldName);
        const val = descriptor.value;
        if (val == null)
            return 'N/A';
        if (fieldName === 'active')
            return val ? 'Active' : 'Inactive';
        return val;
    }
    prepareField(text) {
        if (text === 'active')
            return 'Active Status';
        return this.textProcessingService.camelCaseToSentence(text);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVuZC1hYnN0cmFjdC1kZXRhaWwtdmlldy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9iZW5kLWNvcmUtdWkvIiwic291cmNlcyI6WyJsaWIvdmlldy9iZW5kLWFic3RyYWN0LWRldGFpbC12aWV3LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBSUwsY0FBYyxFQUlmLE1BQU0sV0FBVyxDQUFDO0FBS25CLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBR3hELE1BQU0sT0FBZ0IsK0JBQWlGLFNBQVEsaUJBQWlCO0lBSzlILFlBQ1ksY0FBOEIsRUFDOUIsZUFBdUMsRUFDdkMsWUFBOEIsRUFDOUIsY0FBOEIsRUFDOUIscUJBQTRDLEVBQy9DLE9BQW9CLEVBQ25CLFNBQTJCLEVBQzNCLGNBQThCO1FBQ3BDLEtBQUssRUFBRSxDQUFDO1FBUkEsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLG9CQUFlLEdBQWYsZUFBZSxDQUF3QjtRQUN2QyxpQkFBWSxHQUFaLFlBQVksQ0FBa0I7UUFDOUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUFDL0MsWUFBTyxHQUFQLE9BQU8sQ0FBYTtRQUNuQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUMzQixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7SUFDM0IsQ0FBQztJQUVkLFFBQVE7UUFDTixLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDNUQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ3JELElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7O1lBQy9ELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRU8sU0FBUztRQUNmLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFrQyxFQUFFLEVBQUU7WUFDekYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQixDQUFDLEVBQUUsQ0FBQyxLQUF3QixFQUFFLEVBQUU7WUFDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxRQUFRLENBQUMsR0FBa0M7UUFDakQsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxLQUFLLGNBQWMsQ0FBQyxPQUFPLEVBQUU7WUFDbkUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMscUNBQXFDLENBQUMsQ0FBQztZQUNuRSxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzlCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1NBQ25COztZQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVPLEtBQUssQ0FBQyxLQUF3QjtRQUNwQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxxQ0FBcUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRU0scUJBQXFCLENBQUMsWUFBMEI7UUFDckQsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsdUJBQXVCO1FBQ3pGLElBQUksR0FBRyxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDakQsZUFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLEdBQUcsR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLGVBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQyxHQUFHLEdBQUcsZUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMxQyxlQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckMsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQztJQUVNLGFBQWEsQ0FBQyxZQUEwQixFQUFFLFNBQWlCO1FBQ2hFLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDNUUsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUM3QixJQUFJLEdBQUcsSUFBSSxJQUFJO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFDOUIsSUFBSSxTQUFTLEtBQUssUUFBUTtZQUFFLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztRQUMvRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxZQUFZLENBQUMsSUFBWTtRQUN2QixJQUFJLElBQUksS0FBSyxRQUFRO1lBQUUsT0FBTyxlQUFlLENBQUM7UUFDOUMsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0FjdGl2YXRlZFJvdXRlfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQge1xyXG4gIEJhc2VDcnVkRGF0YSxcclxuICBCYXNlRGF0YSxcclxuICBCYXNlU2VydmljZSxcclxuICBCZW5kU3RhdHVzVGV4dCxcclxuICBDb25zb2xlU2VydmljZSxcclxuICBEYXRhUmVzcG9uc2UsXHJcbiAgVGV4dFByb2Nlc3NpbmdTZXJ2aWNlXHJcbn0gZnJvbSAnYmVuZC1jb3JlJztcclxuaW1wb3J0IHtIdHRwRXJyb3JSZXNwb25zZSwgSHR0cFJlc3BvbnNlfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7QmVuZFRvYXN0U2VydmljZX0gZnJvbSAnLi4vbWVzc2FnZS9iZW5kLXRvYXN0LnNlcnZpY2UnO1xyXG5pbXBvcnQge0JlbmRVaU1vZGVsfSBmcm9tICcuLi91aS1tb2RlbC9iZW5kLXVpLW1vZGVsJztcclxuaW1wb3J0IHtUcmFuc2xhdGVTZXJ2aWNlfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcclxuaW1wb3J0IHtCZW5kQmFzZUNvbXBvbmVudH0gZnJvbSAnLi9iZW5kLWJhc2UuY29tcG9uZW50JztcclxuaW1wb3J0IHtMYW5nS2V5U2VydmljZX0gZnJvbSAnLi4vc2VydmljZS9sYW5nLWtleS1zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCZW5kQWJzdHJhY3REZXRhaWxWaWV3Q29tcG9uZW50PFIgZXh0ZW5kcyBCYXNlQ3J1ZERhdGEsIERvbWFpbiBleHRlbmRzIEJhc2VEYXRhPiBleHRlbmRzIEJlbmRCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBwcml2YXRlIHZpZXdJZDogbnVtYmVyO1xyXG4gIHJlYWR5OiBib29sZWFuO1xyXG4gIGNydWREYXRhOiBSO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUsXHJcbiAgICBwcm90ZWN0ZWQgdXNlckNydWRTZXJ2aWNlOiBCYXNlU2VydmljZTxSLCBEb21haW4+LFxyXG4gICAgcHJvdGVjdGVkIHRvYXN0U2VydmljZTogQmVuZFRvYXN0U2VydmljZSxcclxuICAgIHByb3RlY3RlZCBjb25zb2xlU2VydmljZTogQ29uc29sZVNlcnZpY2UsXHJcbiAgICBwcm90ZWN0ZWQgdGV4dFByb2Nlc3NpbmdTZXJ2aWNlOiBUZXh0UHJvY2Vzc2luZ1NlcnZpY2UsXHJcbiAgICBwdWJsaWMgdWlNb2RlbDogQmVuZFVpTW9kZWwsXHJcbiAgICBwcml2YXRlIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSxcclxuICAgIHByaXZhdGUgbGFuZ0tleVNlcnZpY2U6IExhbmdLZXlTZXJ2aWNlXHJcbiAgKSB7IHN1cGVyKCk7IH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBzdXBlci5wcmVwYXJlVHJhbnNsYXRlKHRoaXMudHJhbnNsYXRlLCB0aGlzLmxhbmdLZXlTZXJ2aWNlKTtcclxuICAgIHRoaXMucmVhZHkgPSBmYWxzZTtcclxuICAgIHRoaXMudmlld0lkID0gdGhpcy5hY3RpdmF0ZWRSb3V0ZS5zbmFwc2hvdC5wYXJhbXMuaWQ7XHJcbiAgICBpZiAodGhpcy52aWV3SWQgPT0gbnVsbClcclxuICAgICAgdGhpcy50b2FzdFNlcnZpY2UuZXJyb3IoJ0Nhbm5vdCBmZXRjaCB2aWV3IERhdGEsIGlkIHBhcmFtIGVtcHR5Jyk7XHJcbiAgICBlbHNlIHRoaXMuZmV0Y2hEYXRhKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGZldGNoRGF0YSgpIHtcclxuICAgIHRoaXMudXNlckNydWRTZXJ2aWNlLmZpbmRPbmUodGhpcy52aWV3SWQpLnN1YnNjcmliZSgocmVzOiBIdHRwUmVzcG9uc2U8RGF0YVJlc3BvbnNlPFI+PikgPT4ge1xyXG4gICAgICB0aGlzLnJlc3BvbnNlKHJlcyk7XHJcbiAgICB9LCAoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKSA9PiB7XHJcbiAgICAgIHRoaXMuZXJyb3IoZXJyb3IpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlc3BvbnNlKHJlczogSHR0cFJlc3BvbnNlPERhdGFSZXNwb25zZTxSPj4pIHtcclxuICAgIGlmIChyZXMub2sgJiYgcmVzLmJvZHkuc3RhdHVzLnRvU3RyaW5nKCkgPT09IEJlbmRTdGF0dXNUZXh0LlNVQ0NFU1MpIHtcclxuICAgICAgdGhpcy5jb25zb2xlU2VydmljZS5tZXNzYWdlKCdTdWNjZXNzZnVsbHkgRmV0Y2ggRGV0YWlsIFZpZXcgRGF0YScpO1xyXG4gICAgICB0aGlzLmNydWREYXRhID0gcmVzLmJvZHkuZGF0YTtcclxuICAgICAgdGhpcy5yZWFkeSA9IHRydWU7XHJcbiAgICB9IGVsc2UgdGhpcy50b2FzdFNlcnZpY2UuZXJyb3IoJ0Vycm9yIGR1cmluZyBEZXRhaWwgVmlldyBkYXRhIGZldGNoJyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGVycm9yKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkge1xyXG4gICAgdGhpcy5jb25zb2xlU2VydmljZS5lcnJvcignRXJyb3IgRHVyaW5nIERldGFpbCBWaWV3IERhdGEgRmV0Y2gnLCBlcnJvcik7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0QWxsQXZhaWxhYmxlRmllbGRzKGJhc2VDcnVkRGF0YTogQmFzZUNydWREYXRhKTogc3RyaW5nW10ge1xyXG4gICAgY29uc3QgYXZhaWxhYmxlRmllbGRzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYmFzZUNydWREYXRhKTsgLypEZWxldGUgQ3VycmVudCBUaW1lKi9cclxuICAgIGxldCBpZHggPSBhdmFpbGFibGVGaWVsZHMuaW5kZXhPZignY3VycmVudFRpbWUnKTtcclxuICAgIGF2YWlsYWJsZUZpZWxkcy5zcGxpY2UoaWR4LCBpZHggKyAxKTtcclxuICAgIGlkeCA9IGF2YWlsYWJsZUZpZWxkcy5pbmRleE9mKCdpZCcpO1xyXG4gICAgYXZhaWxhYmxlRmllbGRzLnNwbGljZShpZHgsIGlkeCArIDEpO1xyXG4gICAgaWR4ID0gYXZhaWxhYmxlRmllbGRzLmluZGV4T2YoJ3Bhc3N3b3JkJyk7XHJcbiAgICBhdmFpbGFibGVGaWVsZHMuc3BsaWNlKGlkeCwgaWR4ICsgMSk7XHJcbiAgICByZXR1cm4gYXZhaWxhYmxlRmllbGRzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEZpZWxkVmFsdWUoYmFzZUNydWREYXRhOiBCYXNlQ3J1ZERhdGEsIGZpZWxkTmFtZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlQ3J1ZERhdGEsIGZpZWxkTmFtZSk7XHJcbiAgICBjb25zdCB2YWwgPSBkZXNjcmlwdG9yLnZhbHVlO1xyXG4gICAgaWYgKHZhbCA9PSBudWxsKSByZXR1cm4gJ04vQSc7XHJcbiAgICBpZiAoZmllbGROYW1lID09PSAnYWN0aXZlJykgcmV0dXJuIHZhbCA/ICdBY3RpdmUnIDogJ0luYWN0aXZlJztcclxuICAgIHJldHVybiB2YWw7XHJcbiAgfVxyXG5cclxuICBwcmVwYXJlRmllbGQodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGlmICh0ZXh0ID09PSAnYWN0aXZlJykgcmV0dXJuICdBY3RpdmUgU3RhdHVzJztcclxuICAgIHJldHVybiB0aGlzLnRleHRQcm9jZXNzaW5nU2VydmljZS5jYW1lbENhc2VUb1NlbnRlbmNlKHRleHQpO1xyXG4gIH1cclxufVxyXG4iXX0=