import { BaseFlexibleCrudViewData, BendStatus, BendStatusText, httpStatus, PageableDataResponse } from 'bend-core';
import { BendBaseComponent } from './bend-base.component';
export class BendAbstractListViewComponent extends BendBaseComponent {
    constructor(crudService, toastService, consoleService, appUtilService, compiler, uiModel, translate, langKeyService) {
        super();
        this.crudService = crudService;
        this.toastService = toastService;
        this.consoleService = consoleService;
        this.appUtilService = appUtilService;
        this.compiler = compiler;
        this.uiModel = uiModel;
        this.translate = translate;
        this.langKeyService = langKeyService;
        this.SUCCESS = 'Active Status Changed Successfully';
        this.FAILED = 'Active Status Change Failed';
        this.pageSize = 2;
        this.pageCount = 0;
        this.load = false;
    }
    ngOnInit() {
        super.prepareTranslate(this.translate, this.langKeyService);
        this.crudData = this.emptyData();
        this.fetchAll();
    }
    fetchAll() {
        this.crudService.fetchAllFlexible({ page: this.pageCount, size: this.pageSize }).subscribe((res) => {
            if (res.status === httpStatus.OK && res.body.status.toString() === BendStatusText.SUCCESS) {
                this.crudData = res.body;
                this.crudData.data.columns.push(this.uiModel.tableStructure.actionColumn.title);
                this.load = true;
            }
            else {
                this.consoleService.error('Crud Data Fetch Problem');
            }
        }, (error) => {
            this.consoleService.error('Error Occurred During Crud Data Fetch', error);
        });
    }
    compile(index, values) {
        return this.compiler.compile(index, values);
    }
    prev() {
        this.pageCount--;
        this.reshape();
        this.fetchAll();
    }
    isFirstPage() {
        return this.pageCount === 0;
    }
    reset() {
        this.pageCount = 0;
        this.fetchAll();
    }
    next() {
        this.pageCount++;
        this.reshape();
        this.fetchAll();
    }
    isLastPage() {
        return this.pageCount === (this.crudData.totalPages - 1);
    }
    onPage(event) {
        console.log(event);
    }
    reshape() {
        if (this.pageCount < 0) {
            this.pageCount = 0;
        }
        else if (this.pageCount > this.crudData.totalPages) {
            this.pageCount = this.crudData.totalPages;
        }
    }
    emptyData() {
        const data = new BaseFlexibleCrudViewData();
        data.columns = [];
        data.indexes = [];
        data.values = [];
        const d = new PageableDataResponse();
        d.totalPages = 0;
        d.totalElements = 0;
        d.status = BendStatus.FAILURE;
        d.data = data;
        d.dataTypes = [];
        return d;
    }
}
//# sourceMappingURL=data:application/json;base64,