import { __extends } from "tslib";
import { BaseFlexibleCrudViewData, BendStatus, BendStatusText, httpStatus, PageableDataResponse } from 'bend-core';
import { BendBaseComponent } from './bend-base.component';
var BendAbstractListViewComponent = /** @class */ (function (_super) {
    __extends(BendAbstractListViewComponent, _super);
    function BendAbstractListViewComponent(crudService, toastService, consoleService, appUtilService, compiler, uiModel, translate, langKeyService) {
        var _this = _super.call(this) || this;
        _this.crudService = crudService;
        _this.toastService = toastService;
        _this.consoleService = consoleService;
        _this.appUtilService = appUtilService;
        _this.compiler = compiler;
        _this.uiModel = uiModel;
        _this.translate = translate;
        _this.langKeyService = langKeyService;
        _this.SUCCESS = 'Active Status Changed Successfully';
        _this.FAILED = 'Active Status Change Failed';
        _this.pageSize = 2;
        _this.pageCount = 0;
        _this.load = false;
        return _this;
    }
    BendAbstractListViewComponent.prototype.ngOnInit = function () {
        _super.prototype.prepareTranslate.call(this, this.translate, this.langKeyService);
        this.crudData = this.emptyData();
        this.fetchAll();
    };
    BendAbstractListViewComponent.prototype.fetchAll = function () {
        var _this = this;
        this.crudService.fetchAllFlexible({ page: this.pageCount, size: this.pageSize }).subscribe(function (res) {
            if (res.status === httpStatus.OK && res.body.status.toString() === BendStatusText.SUCCESS) {
                _this.crudData = res.body;
                _this.crudData.data.columns.push(_this.uiModel.tableStructure.actionColumn.title);
                _this.load = true;
            }
            else {
                _this.consoleService.error('Crud Data Fetch Problem');
            }
        }, function (error) {
            _this.consoleService.error('Error Occurred During Crud Data Fetch', error);
        });
    };
    BendAbstractListViewComponent.prototype.compile = function (index, values) {
        return this.compiler.compile(index, values);
    };
    BendAbstractListViewComponent.prototype.prev = function () {
        this.pageCount--;
        this.reshape();
        this.fetchAll();
    };
    BendAbstractListViewComponent.prototype.isFirstPage = function () {
        return this.pageCount === 0;
    };
    BendAbstractListViewComponent.prototype.reset = function () {
        this.pageCount = 0;
        this.fetchAll();
    };
    BendAbstractListViewComponent.prototype.next = function () {
        this.pageCount++;
        this.reshape();
        this.fetchAll();
    };
    BendAbstractListViewComponent.prototype.isLastPage = function () {
        return this.pageCount === (this.crudData.totalPages - 1);
    };
    BendAbstractListViewComponent.prototype.onPage = function (event) {
        console.log(event);
    };
    BendAbstractListViewComponent.prototype.reshape = function () {
        if (this.pageCount < 0) {
            this.pageCount = 0;
        }
        else if (this.pageCount > this.crudData.totalPages) {
            this.pageCount = this.crudData.totalPages;
        }
    };
    BendAbstractListViewComponent.prototype.emptyData = function () {
        var data = new BaseFlexibleCrudViewData();
        data.columns = [];
        data.indexes = [];
        data.values = [];
        var d = new PageableDataResponse();
        d.totalPages = 0;
        d.totalElements = 0;
        d.status = BendStatus.FAILURE;
        d.data = data;
        d.dataTypes = [];
        return d;
    };
    return BendAbstractListViewComponent;
}(BendBaseComponent));
export { BendAbstractListViewComponent };
//# sourceMappingURL=data:application/json;base64,