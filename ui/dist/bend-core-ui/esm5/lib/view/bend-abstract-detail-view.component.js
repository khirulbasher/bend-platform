import { __extends } from "tslib";
import { BendStatusText } from 'bend-core';
import { BendBaseComponent } from './bend-base.component';
var BendAbstractDetailViewComponent = /** @class */ (function (_super) {
    __extends(BendAbstractDetailViewComponent, _super);
    function BendAbstractDetailViewComponent(activatedRoute, userCrudService, toastService, consoleService, textProcessingService, uiModel, translate, langKeyService) {
        var _this = _super.call(this) || this;
        _this.activatedRoute = activatedRoute;
        _this.userCrudService = userCrudService;
        _this.toastService = toastService;
        _this.consoleService = consoleService;
        _this.textProcessingService = textProcessingService;
        _this.uiModel = uiModel;
        _this.translate = translate;
        _this.langKeyService = langKeyService;
        return _this;
    }
    BendAbstractDetailViewComponent.prototype.ngOnInit = function () {
        _super.prototype.prepareTranslate.call(this, this.translate, this.langKeyService);
        this.ready = false;
        this.viewId = this.activatedRoute.snapshot.params.id;
        if (this.viewId == null)
            this.toastService.error('Cannot fetch view Data, id param empty');
        else
            this.fetchData();
    };
    BendAbstractDetailViewComponent.prototype.fetchData = function () {
        var _this = this;
        this.userCrudService.findOne(this.viewId).subscribe(function (res) {
            _this.response(res);
        }, function (error) {
            _this.error(error);
        });
    };
    BendAbstractDetailViewComponent.prototype.response = function (res) {
        if (res.ok && res.body.status.toString() === BendStatusText.SUCCESS) {
            this.consoleService.message('Successfully Fetch Detail View Data');
            this.crudData = res.body.data;
            this.ready = true;
        }
        else
            this.toastService.error('Error during Detail View data fetch');
    };
    BendAbstractDetailViewComponent.prototype.error = function (error) {
        this.consoleService.error('Error During Detail View Data Fetch', error);
    };
    BendAbstractDetailViewComponent.prototype.getAllAvailableFields = function (baseCrudData) {
        var availableFields = Object.getOwnPropertyNames(baseCrudData); /*Delete Current Time*/
        var idx = availableFields.indexOf('currentTime');
        availableFields.splice(idx, idx + 1);
        idx = availableFields.indexOf('id');
        availableFields.splice(idx, idx + 1);
        idx = availableFields.indexOf('password');
        availableFields.splice(idx, idx + 1);
        return availableFields;
    };
    BendAbstractDetailViewComponent.prototype.getFieldValue = function (baseCrudData, fieldName) {
        var descriptor = Object.getOwnPropertyDescriptor(baseCrudData, fieldName);
        var val = descriptor.value;
        if (val == null)
            return 'N/A';
        if (fieldName === 'active')
            return val ? 'Active' : 'Inactive';
        return val;
    };
    BendAbstractDetailViewComponent.prototype.prepareField = function (text) {
        if (text === 'active')
            return 'Active Status';
        return this.textProcessingService.camelCaseToSentence(text);
    };
    return BendAbstractDetailViewComponent;
}(BendBaseComponent));
export { BendAbstractDetailViewComponent };
//# sourceMappingURL=data:application/json;base64,